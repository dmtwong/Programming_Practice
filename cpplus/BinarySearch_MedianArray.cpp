//============================================================================
// Name        : BinarySearch_MedianArray.cpp
// Author      : dmtwong
// Version     :
// Copyright   : Search step simulation Q1, not optimal, suggest: O(long) + O(short/2)
// Description : Hello World in C++, Ansi-style
//============================================================================
//There are two sorted arrays A and B of size m and n respectively.//
//Find the median of the two sorted arrays ( The median of the array formed by
//merging both the arrays ).
//The overall run time complexity should be O(log (m+n)).
//Sample Input
//A : [1 4 5]
//B : [2 3]


//Time Limit Exceeded.
//In an actual interview, the sooner you arrive at the most optimal solution, the better. In general, try to correctly estimate the time complexity of your solution.
//Your submission timed out for the following input:
//Your submission failed for the following input

//There are 2 lines in the input
//
//Line 1 ( Corresponds to arg 1 ) : An integer array. First number is the size S of the array. Then S numbers follow which indicate the elements in the array.
//    For example, Array: [1, 2, 6] will be written as "3 1 2 6"(without quotes).
//
//Line 2 ( Corresponds to arg 2 ) : An integer array. First number is the size S of the array. Then S numbers follow which indicate the elements in the array.
//    For example, Array: [1, 2, 6] will be written as "3 1 2 6"(without quotes).
//
#include <iostream>
#include <vector>
using namespace std;


//double Solution::findMedianSortedArrays(const vector<int> &A, const vector<int> &B) {
double findMedianSortedArrays(const vector<int> &A, const vector<int> &B) {
	// Do not write main() function.
    // Do not read input, instead use the arguments to the function.
    // Do not print the output, instead return values as specified
    // Still have a doubt. Checkout www.interviewbit.com/pages/sample_codes/ for more details
	int n_A = A.size();
	int n_B = B.size();
	vector <int> result;
	result.reserve(n_A + n_B);
	int ix_A =0, ix_B = 0;
	while ((ix_A < n_A) and (ix_B < n_B)){
		if (A[ix_A] < B[ix_B]){
			result[ix_A + ix_B] = A[ix_A];
			ix_A += 1;
		} else {
			result[ix_A + ix_B] = B[ix_B];
			ix_B += 1;
		}
	}
//	cout << "One side end" << endl;
//	for (int i = 0; i < n_A + n_B; i++){
//	    std::cout << result[i] << ' ';
//	}
	while (ix_A < n_A){
		result[ix_A + ix_B] = A[ix_A];
		ix_A += 1;
	}
//
//	cout << "if A still not reaching end" << endl;
//	for (int i = 0; i < n_A + n_B; i++){
//	    std::cout << result[i] << ' ';
//	}
	while (ix_B < n_B){
		result[ix_A + ix_B] = B[ix_B];
		ix_B += 1;
	}
//	cout << "if B still not reaching end" << endl;
//	for (int i = 0; i < n_A + n_B; i++){
//	    std::cout << result[i] << ' ';
//	}

	int n_mid = (n_A + n_B) / 2;
	double real_mid;
	if ((n_A + n_B) % 2 == 0){
		real_mid = double(result[n_mid] + result[n_mid-1]) / 2;
	} else {
		real_mid = result[n_mid];
//		return real_mid;
	}
	return real_mid;

}

int main() {
	vector <int> A =  { -50, -41, -40, -19, 5, 21, 28 };
	vector <int> B =  { -50, -21, -10 };
	float result2 = findMedianSortedArrays(A, B);
	cout << result2 << endl;

	vector <int> A2 = { 0, 23 };
	vector <int> B2 = {};
	float result22 = findMedianSortedArrays(A2, B2);
	cout << result22 << endl;

	return 0;
}

//Editorial C++
//double Solution::findMedianSortedArrays(const vector<int> &A, const vector<int> &B) {
//    int N1 = A.size();
//    int N2 = B.size();
//    if (N1 < N2) return findMedianSortedArrays(B, A);
//    if (N2 == 0) return (A[(N1-1)/2] + (double)A[N1/2])/2.0;
//
//    int lo = 0, hi = N2 * 2,mid1,mid2;
//    double L1,L2,R1,R2;
//    while (lo <= hi) {
//         mid2 = (lo + hi) / 2;
//         mid1 = N1 + N2 - mid2;
//
//         L1 = (mid1 == 0) ? -1000000000 : A[(mid1-1)/2];
//         L2 = (mid2 == 0) ? -1000000000 : B[(mid2-1)/2];
//         R1 = (mid1 == N1 * 2) ? 1000000000 : A[(mid1)/2];
//         R2 = (mid2 == N2 * 2) ? 1000000000 : B[(mid2)/2];
//
//        if (L1 > R2) lo = mid2 + 1;
//        else if (L2 > R1) hi = mid2 - 1;
//        else return (max(L1,L2) + min(R1, R2)) / 2;
//    }
//    return -1;
//}
//
//Python
//class Solution:
//    # @param A : tuple of integers
//    # @param B : tuple of integers
//    # @return a double
//    def findMedianSortedArrays(self, A, B):
//        m = len(A)
//        n = len(B)
//        if m > n:
//            n,m = m,n
//            A,B = B,A
//        if m == 0:
//            if n == 0:
//                return 0
//            if n%2:
//                return B[n/2]
//            else:
//                return (B[n/2]+B[n/2-1])/2.0
//        low = 0
//        high = m
//        while low <= high:
//            i = (low+high)/2
//            j = (m+n+1)/2-i
//            if (j == 0 or i == m or B[j - 1] <= A[i]) and (i == 0 or j == n or A[i-1] <= B[j]):
//                if (m+n)%2:
//                    if i == 0:
//                        return B[j-1]
//                    elif j == 0:
//                        return A[i-1]
//                    return max(A[i-1],B[j-1])
//                else:
//                    if i == 0:
//                        return (B[j-1] + min(A[i],B[j]))/2.0
//                    if j == 0:
//                    	return (A[i-1] + min(A[i],B[j]))/2.0
//                    if i == m:
//                    	return (max(A[i-1],B[j-1]) + B[j])/2.0
//                    if j == n:
//                    	return (max(A[i-1],B[j-1]) + A[i])/2.0
//                    return (max(A[i-1],B[j-1]) + min(A[i],B[j]))/2.0
//            elif (j == 0 or i == m or B[j - 1] > A[i]):
//                low = i+1
//            elif (i == 0 or j == n or A[i-1] > B[j]):
//                high = i-1
//        return -1
